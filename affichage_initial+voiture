import matplotlib.pyplot as plt
import circuit
import checkpoint
import trajectoire
import numpy as np

from matplotlib.offsetbox import OffsetImage, AnnotationBbox
from matplotlib.animation import FuncAnimation
from matplotlib.transforms import Affine2D # à utiliser pour faire tourner la voiture

fig, ax = plt.subplots()
ax.set_aspect('equal')

# ligne centrale + bordures
ax.plot(circuit.pos[0], circuit.pos[1], 'b--')
ax.plot(circuit.liste_gauche_triee[0], circuit.liste_gauche_triee[1])
ax.plot(circuit.liste_droite_triee[0], circuit.liste_droite_triee[1])

# checkpoints au centre
#plt.scatter(checkpoint.x, checkpoint.y)

# checkpoints à droite
#plt.scatter(checkpoint.points_droite_valides[0], checkpoint.points_droite_valides[1])

# checkpoints à gauche
#plt.scatter(checkpoint.points_gauche_valides[0], checkpoint.points_gauche_valides[1])

# checkpoints reliés
#plt.plot((checkpoint.points_gauche_valides[0],checkpoint.points_droite_valides[0]),(checkpoint.points_gauche_valides[1],checkpoint.points_droite_valides[1]))

# tracé trajectoire
ax.plot(trajectoire.P[:,0], trajectoire.P[:,1], color='b')

# Charger une image de voiture
chemin_image_voiture = "C:\\Users\\cleme\\Documents\\projet prog\\voiture.png"

image_voiture = plt.imread(chemin_image_voiture) #pour lire une image à partir d'un fichier et la charger en tant qu'objet NumPy array

# Définir la position et l'orientation initiales de la voiture
position_initiale = [trajectoire.P[0,0], trajectoire.P[0,1]]
orientation_initiale = np.pi/4  # Angle initial en radians (0 signifie que la voiture est alignée avec l'axe x)

# Afficher l'image sur le graphique
image_offset = OffsetImage(image_voiture, zoom=0.2) #pour représenter une image dans un graphique

# Créer une transformation affine pour la rotation de l'image
transformation_affine = Affine2D().rotate(orientation_initiale)
image_offset.set_transform(transformation_affine + ax.transData)

ab = AnnotationBbox(image_offset, position_initiale, frameon=False, pad=0) #pour créer une boîte d'annotation contenant un objet (ici OffsetImage)

ax.add_artist(ab)

# Fonction pour mettre à jour la position de la voiture à chaque étape de l'animation
def changmt_position(i):
    nouvelle_position = [trajectoire.P[i,0], trajectoire.P[i,1]]
    orientation = np.degrees(np.arctan2(trajectoire.P[i, 1] - trajectoire.P[i - 1, 1], trajectoire.P[i, 0] - trajectoire.P[i - 1, 0]))
    ab.xybox = nouvelle_position
    ab.xy = nouvelle_position
 # Mettre à jour l'orientation de la voiture
    transformation_affine = Affine2D().rotate(orientation)
    image_offset.set_transform(transformation_affine + ax.transData)
    return ab

# Créer l'animation
animation = FuncAnimation(fig, changmt_position, frames=range(len(trajectoire.P)))

plt.show()
