import scipy.optimize
import checkpoint
import circuit
import numpy as np


D=checkpoint.points_droite_valides
G=checkpoint.points_gauche_valides

P0 = (0.5*(G[0][0]+D[0][0]), 0.5*(G[1][0]+D[1][0]))


G = np.transpose(G)
D = np.transpose(D)

G[0] = (G[0]+D[0])/2
D[0] = G[0]

#fonction qui prend un vecteur(t) et renvoie un vecteur (f)


def calcul_f(t):
    #P= D+np.stack([t,t]).T*(G-D)
    P= D+np.reshape(t,(len(t),1))*(G-D)
    result=np.linalg.norm(P[1:]-P[:-1], axis=1)
    return result



results= scipy.optimize.least_squares(calcul_f, np.repeat(1/2,len(G)), bounds=(0,1))
t=results.x
print(t)
#renvoie un result: object contenant t + valeur atteinte en t et autre parties de l'optimisation

#point de depart t=1/2, attention t entre 0 et 1 (argument bounds)


P= D+np.reshape(t,(len(t),1))*(G-D)
